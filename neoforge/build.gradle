plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge {
        platformPackage = "forge"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    maven { url "https://maven.su5ed.dev/releases" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://maven.blamejared.com/" } // location of the maven that hosts JEI files since January 2023
    maven { url "https://modmaven.dev" } // location of a maven mirror for JEI files, as a fallback
    maven { url "https://maven.wispforest.io/releases" }
    mavenCentral()
//    maven { url 'https://jitpack.io' }
    mavenLocal()
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

dependencies {
    forge "net.neoforged:forge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }

    implementation include("io.github.llamalad7:mixinextras-forge:0.3.5")

    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_version}")

    include modApi("dev.su5ed.sinytra.fabric-api:fabric-api-base:0.4.31+ef105b4977"){
        exclude group: "dev.su5ed.sinytra.fabric-api"
    }

    include modApi("dev.su5ed.sinytra.fabric-api:fabric-data-attachment-api-v1:1.0.0+30ef839e77"){
        exclude group: "dev.su5ed.sinytra.fabric-api"
    } //0.3.37+a6081afc77
    include modApi("dev.su5ed.sinytra.fabric-api:fabric-entity-events-v1:1.6.0+6274ab9d77"){
        exclude group: "dev.su5ed.sinytra.fabric-api"
}
    include modApi("dev.su5ed.sinytra.fabric-api:fabric-object-builder-api-v1:11.1.3+2174fc8477"){
        exclude group: "dev.su5ed.sinytra.fabric-api"
    }
    forgeRuntimeLibrary("io.wispforest:endec:${rootProject.endec_version}")
    forgeRuntimeLibrary("io.wispforest.endec:gson:${rootProject.endec_gson_version}")
    forgeRuntimeLibrary("io.wispforest.endec:netty:${rootProject.endec_netty_version}")

    testmodImplementation sourceSets.main.output

    var type = rootProject.properties.get("item_viewer_type");

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-forge:${rootProject.rei_version}")
    modCompileOnly("dev.emi:emi-forge:${rootProject.emi_version}:api")
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}")

    if(type == "rei") {
        modLocalRuntime("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")
        modLocalRuntime("dev.architectury:architectury-forge:${rootProject.arch_api}")
    } else if(type == "emi") {
        modLocalRuntime("dev.emi:emi-forge:${rootProject.emi_version}")
    } else if(type == "jei") {
        modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    } else if(type != "none") {
        throw new IllegalStateException("Unable to locate the given item viewer!")
    }
}

processResources {
    var versionParts = (project.mod_version as String).split("-");

    String finalVersion;

    if(versionParts.size() > 1) {
        versionParts[1] = versionParts[1].replace(".", "")

        finalVersion = "${versionParts[0]}-${versionParts[1]}"
    } else {
        finalVersion = project.mod_version
    }

    finalVersion += "+${rootProject.minecraft_base_version}"

    filesMatching("META-INF/mods.toml") {
        expand "version": finalVersion
    }
    inputs.property "META-INF/mods.toml", finalVersion
}

processTestmodResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/mods.toml", project.version
}

loom {
    runs {
        testmodClient {
            client()
            forgeTemplate "client"
            ideConfigGenerated true
            name = "Testmod Client"
            mods {
                create("testccessories") {
                    sourceSet sourceSets.testmod
                }
                create("${project.archives_base_name}"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated true
            name = "Testmod Server"
            mods {
                create("testccessories") {
                    sourceSet sourceSets.testmod
                }
                create("${project.archives_base_name}"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge  {
        mixinConfig "accessories-common.mixins.json"
        mixinConfig "accessories-neoforge.mixins.json"
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set ""
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}